'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var React = require('react');
var React__default = _interopDefault(React);
var PropTypes = require('prop-types');
var PropTypes__default = _interopDefault(PropTypes);

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) {
  return typeof obj;
} : function (obj) {
  return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
};

var classCallCheck = function (instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
};

var createClass = function () {
  function defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor) descriptor.writable = true;
      Object.defineProperty(target, descriptor.key, descriptor);
    }
  }

  return function (Constructor, protoProps, staticProps) {
    if (protoProps) defineProperties(Constructor.prototype, protoProps);
    if (staticProps) defineProperties(Constructor, staticProps);
    return Constructor;
  };
}();

var inherits = function (subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
  }

  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      enumerable: false,
      writable: true,
      configurable: true
    }
  });
  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
};

var possibleConstructorReturn = function (self, call) {
  if (!self) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }

  return call && (typeof call === "object" || typeof call === "function") ? call : self;
};

function pluralize(pluralizationRules, language, str) {
  var definedValues = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};

  try {
    var values = str.match(/{{.*?}}/g);

    if (!values) {
      return str;
    }

    var newStr = str;

    values.forEach(function (value) {
      var valueName = value.substring(2, value.length - 2);

      if (_typeof(definedValues[valueName]) === 'object') {
        var dependsOn = Number(definedValues[valueName].dependsOn);

        if (Number.isNaN(dependsOn)) {
          throw new Error('Missing "dependsOn" in ' + JSON.stringify(definedValues[valueName]));
        }

        var ruleName = 'other';
        var _rules = pluralizationRules[language];

        if (!_rules || !Object.keys(_rules).length) {
          console.warn('react-internationalization: You should add pluralization rules for current language');
        }

        Object.keys(_rules).forEach(function (key) {
          if (_rules[key](dependsOn)) {
            ruleName = key;
          }
        });

        newStr = newStr.replace(new RegExp(value, 'g'), definedValues[valueName][ruleName]);
      }
    });

    return newStr;
  } catch (error) {
    console.error('react-internationalization: ', error);

    return str;
  }
}

var rules = {
  en: {
    one: function one(count) {
      return count === 1;
    }
  }
};

var Internationalize = function Internationalize() {
  var _this = this;

  classCallCheck(this, Internationalize);
  this.translations = {};
  this.languageChangeListeners = [];
  this.languageSettingListeners = [];
  this.pluralizationRules = rules;
  this.language = navigator.language;

  this.translate = function (key, values, pluralizeValues) {
    try {
      if (!key) {
        return '';
      }

      var keys = key ? key.split('.') : [''];

      var res = keys.reduce(function (res, key) {
        return res = res[key] || '';
      }, internationalize.getTranslations());

      if (typeof res !== 'string') {
        console.error('react-internationalization: Translation "' + key + '" must be a string');

        return key;
      } else {
        return _this.parseValue(pluralize(_this.pluralizationRules, _this.language, res, pluralizeValues, _this.language), values);
      }
    } catch (error) {}
  };

  this.parseValue = function (str) {
    var definedValues = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    var values = str.match(/{{.*?}}/g);

    if (!values) {
      return str;
    }

    var newStr = str;

    values.forEach(function (value) {
      var valueName = value.substring(2, value.length - 2);

      if (typeof definedValues[valueName] !== 'undefined') {
        newStr = newStr.replace(new RegExp(value, 'g'), definedValues[valueName]);
      }
    });

    return newStr;
  };

  this.getTranslations = function () {
    return _this.translations;
  };

  this.setTranslations = function (language, translations) {
    _this.translations = translations;
    _this.language = language;

    _this.languageChangeListeners.forEach(function (listener) {
      return listener();
    });
  };

  this.addPluralizationRules = function (language, rules$$1) {
    _this.pluralizationRules[language] = rules$$1;
  };

  this.addLanguageChangeListener = function (callback) {
    try {
      _this.languageChangeListeners.push(callback);

      return function () {
        return _this.languageSettingListeners.splice(_this.languageSettingListeners.indexOf(callback), 1);
      };
    } catch (error) {
      console.error('react-internationalization: ', error);
    }
  };

  this.addLanguageSettingListener = function (callback) {
    try {
      _this.languageSettingListeners.push(callback);

      return function () {
        return _this.languageSettingListeners.splice(_this.languageSettingListeners.indexOf(callback), 1);
      };
    } catch (error) {
      console.error('react-internationalization: ', error);
    }
  };

  this.setLanguage = function (language) {
    _this.language = language;
    _this.languageSettingListeners.forEach(function (listener) {
      return listener(language);
    });
  };
};

var internationalize = new Internationalize();
var translate = internationalize.translate;
var setLanguage = internationalize.setLanguage;
var addPluralizationRules = internationalize.addPluralizationRules;

var InternationalizationProvider = function (_Component) {
  inherits(InternationalizationProvider, _Component);

  function InternationalizationProvider(props) {
    classCallCheck(this, InternationalizationProvider);

    var _this = possibleConstructorReturn(this, (InternationalizationProvider.__proto__ || Object.getPrototypeOf(InternationalizationProvider)).call(this, props));

    _this.setTranslations = function (language) {
      try {
        if (_this.props.dynamicImports) {
          _this.props.languages[language]().then(function (translations) {
            internationalize.setTranslations(language, translations);
          });

          return;
        } else {
          var translations = _this.props.languages[language]();

          internationalize.setTranslations(language, translations);
        }
      } catch (error) {
        console.error('Translations setting error: ', error);
      }
    };

    _this.state = {
      translations: {},
      language: props.defaultLanguage
    };
    return _this;
  }

  createClass(InternationalizationProvider, [{
    key: 'getChildContext',
    value: function getChildContext() {
      return {
        translate: internationalize.translate
      };
    }
  }, {
    key: 'componentDidMount',
    value: function componentDidMount() {
      var _this2 = this;

      this.setTranslations(this.props.defaultLanguage);

      internationalize.addLanguageSettingListener(function (language) {
        return _this2.setTranslations(language);
      });
    }
  }, {
    key: 'render',
    value: function render() {
      return this.props.children;
    }
  }]);
  return InternationalizationProvider;
}(React.Component);

InternationalizationProvider.propTypes = {
  defaultLanguage: PropTypes.PropTypes.string.isRequired,
  languages: PropTypes.PropTypes.object.isRequired,
  dynamicImports: PropTypes.PropTypes.bool
};
InternationalizationProvider.defaultProps = {
  dynamicImports: false
};
InternationalizationProvider.childContextTypes = {
  translate: PropTypes.PropTypes.func
};

var Text = function (_Component) {
  inherits(Text, _Component);

  function Text() {
    classCallCheck(this, Text);

    var _this = possibleConstructorReturn(this, (Text.__proto__ || Object.getPrototypeOf(Text)).call(this));

    _this.unsubscribe = function () {};
    return _this;
  }

  createClass(Text, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      var _this2 = this;

      this.unsubscribe = internationalize.addLanguageChangeListener(function () {
        return _this2.forceUpdate();
      });
    }
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      this.unsubscribe();
    }
  }, {
    key: 'render',
    value: function render() {
      var _props = this.props,
          id = _props.id,
          children = _props.children,
          values = _props.values,
          pluralize = _props.pluralize;


      return id ? this.context.translate(id, values, pluralize) || id : children;
    }
  }]);
  return Text;
}(React.Component);

Text.contextTypes = {
  translate: PropTypes__default.func
};
Text.propTypes = {
  id: PropTypes__default.string.isRequired,
  values: PropTypes__default.object,
  pluralize: PropTypes__default.object
};
Text.defaultProps = {
  values: {},
  pluralize: {},
  id: ''
};

var connect = function connect(Component) {
  return function (_React$Component) {
    inherits(_class, _React$Component);

    function _class() {
      classCallCheck(this, _class);
      return possibleConstructorReturn(this, (_class.__proto__ || Object.getPrototypeOf(_class)).apply(this, arguments));
    }

    createClass(_class, [{
      key: 'componentDidMount',
      value: function componentDidMount() {
        var _this2 = this;

        this.unsubscribe = internationalize.addLanguageChangeListener(function () {
          return _this2.forceUpdate();
        });
      }
    }, {
      key: 'componentWillUnmount',
      value: function componentWillUnmount() {
        this.unsubscribe();
      }
    }, {
      key: 'render',
      value: function render() {
        return React__default.createElement(Component, this.props);
      }
    }]);
    return _class;
  }(React__default.Component);
};

exports.setLanguage = setLanguage;
exports.translate = translate;
exports.InternationalizationProvider = InternationalizationProvider;
exports.Text = Text;
exports.internationalize = connect;
exports.addPluralizationRules = addPluralizationRules;
